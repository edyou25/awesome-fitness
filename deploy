#!/bin/bash

# Awesome Fitness 部署脚本
# 用法: ./deploy -r (远程部署) 或 ./deploy -l (本地预览)

set -e  # 遇到错误立即退出

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 打印带颜色的消息
print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# 显示帮助信息
show_help() {
    echo "Awesome Fitness 部署脚本"
    echo ""
    echo "用法:"
    echo "  ./deploy -r    远程部署到GitHub Pages"
    echo "  ./deploy -l    本地构建和预览"
    echo "  ./deploy -h    显示帮助信息"
    echo ""
    echo "选项:"
    echo "  -r, --remote   推送到GitHub并自动部署"
    echo "  -l, --local    本地构建和启动预览服务器"
    echo "  -h, --help     显示此帮助信息"
}

# 生成提交信息
generate_commit_message() {
    # 获取更改的文件列表
    changed_files=$(git diff --cached --name-only)
    
    # 分析更改类型
    if echo "$changed_files" | grep -q "docs/"; then
        if echo "$changed_files" | grep -q "training-programs.rst"; then
            echo "Update training programs content"
        else
            echo "Update documentation"
        fi
    elif echo "$changed_files" | grep -q "README.md"; then
        echo "Update README"
    elif echo "$changed_files" | grep -q "deploy"; then
        echo "Update deploy script"
    elif echo "$changed_files" | grep -q "TODO.md"; then
        echo "Update TODO list"
    elif echo "$changed_files" | grep -q "conf.py"; then
        echo "Update Sphinx configuration"
    elif echo "$changed_files" | grep -q "requirements.txt"; then
        echo "Update dependencies"
    elif echo "$changed_files" | grep -q ".github/"; then
        echo "Update GitHub Actions workflow"
    else
        # 根据文件数量生成信息
        file_count=$(echo "$changed_files" | wc -l)
        if [ "$file_count" -eq 1 ]; then
            filename=$(basename "$changed_files")
            echo "Update $filename"
        else
            echo "Update multiple files ($file_count files)"
        fi
    fi
}

# 检查依赖
check_dependencies() {
    print_info "检查依赖..."
    
    # 检查conda
    if ! command -v conda &> /dev/null; then
        print_error "Conda未安装或不在PATH中"
        exit 1
    fi
    
    # 检查ielts-env环境
    if ! conda env list | grep -q "ielts-env"; then
        print_error "ielts-env环境不存在"
        exit 1
    fi
    
    # 检查git
    if ! command -v git &> /dev/null; then
        print_error "Git未安装"
        exit 1
    fi
    
    print_success "依赖检查通过"
}

# 本地构建和预览
local_deploy() {
    print_info "开始本地构建和预览..."
    
    # 激活conda环境
    print_info "激活conda环境..."
    source $(conda info --base)/etc/profile.d/conda.sh
    conda activate ielts-env
    
    # 进入docs目录
    cd docs
    
    # 清理之前的构建
    print_info "清理之前的构建..."
    rm -rf _build/html
    
    # 构建文档
    print_info "构建Sphinx文档..."
    sphinx-build -b html . _build/html
    
    if [ $? -eq 0 ]; then
        print_success "文档构建成功！"
        
        # 启动本地服务器
        print_info "启动本地预览服务器..."
        print_info "访问地址: http://localhost:8000"
        print_info "按 Ctrl+C 停止服务器"
        echo ""
        
        cd _build/html
        python -m http.server 8000
    else
        print_error "文档构建失败"
        exit 1
    fi
}

# 远程部署
remote_deploy() {
    print_info "开始远程部署..."
    
    # 检查是否有未提交的更改
    if ! git diff-index --quiet HEAD --; then
        print_warning "检测到未提交的更改"
        read -p "是否要提交这些更改? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_info "提交更改..."
            git add .
            
            # 自动生成提交信息
            print_info "自动生成提交信息..."
            commit_msg=$(generate_commit_message)
            print_success "生成的提交信息: $commit_msg"
            
            git commit -m "$commit_msg"
        else
            print_error "取消部署"
            exit 1
        fi
    fi
    
    # 推送到远程仓库
    print_info "推送到GitHub..."
    git push origin main
    
    if [ $? -eq 0 ]; then
        print_success "代码推送成功！"
        print_info "GitHub Actions正在自动构建和部署..."
        print_info "网站将在2-3分钟内更新"
        print_info "访问地址: https://edyou25.github.io/awesome-fitness/"
        print_info "查看部署状态: https://github.com/edyou25/awesome-fitness/actions"
    else
        print_error "推送失败"
        exit 1
    fi
}

# 主函数
main() {
    echo "🚀 Awesome Fitness 部署脚本"
    echo "================================"
    
    # 检查参数
    if [ $# -eq 0 ]; then
        show_help
        exit 1
    fi
    
    # 解析参数
    case $1 in
        -r|--remote)
            check_dependencies
            remote_deploy
            ;;
        -l|--local)
            check_dependencies
            local_deploy
            ;;
        -h|--help)
            show_help
            ;;
        *)
            print_error "未知参数: $1"
            show_help
            exit 1
            ;;
    esac
}

# 运行主函数
main "$@"
