#!/bin/bash

# Awesome Fitness Deploy Script
# Usage: ./deploy -r (remote) or ./deploy -l (local)

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
print_success() { echo -e "${GREEN}✅ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
print_error() { echo -e "${RED}❌ $1${NC}"; }

show_help() {
    echo "Awesome Fitness Deploy Script"
    echo ""
    echo "Usage:"
    echo "  ./deploy -r    Deploy to GitHub Pages"
    echo "  ./deploy -l    Local build and preview"
    echo "  ./deploy -h    Show help"
}

generate_commit_message() {
    changed_files=$(git diff --cached --name-only)
    
    if echo "$changed_files" | grep -q "docs/"; then
        echo -e "Update documentation:\n$changed_files"
    elif echo "$changed_files" | grep -q "README.md"; then
        echo "Update README"
    elif echo "$changed_files" | grep -q "deploy"; then
        echo "Update deploy script"
    elif echo "$changed_files" | grep -q "TODO.md"; then
        echo "Update TODO list"
    elif echo "$changed_files" | grep -q "conf.py"; then
        echo "Update Sphinx configuration"
    elif echo "$changed_files" | grep -q "requirements.txt"; then
        echo "Update dependencies"
    elif echo "$changed_files" | grep -q ".github/"; then
        echo "Update GitHub Actions workflow"
    else
        file_count=$(echo "$changed_files" | wc -l)
        if [ "$file_count" -eq 1 ]; then
            filename=$(basename "$changed_files")
            echo "Update $filename"
        else
            echo "Update multiple files ($file_count files)"
        fi
    fi
}

check_dependencies() {
    print_info "Checking dependencies..."
    
    if ! command -v conda &> /dev/null; then
        print_error "Conda not found"
        exit 1
    fi
    
    if ! conda env list | grep -q "ielts-env"; then
        print_error "ielts-env not found"
        exit 1
    fi
    
    if ! command -v git &> /dev/null; then
        print_error "Git not found"
        exit 1
    fi
    
    print_success "Dependencies OK"
}

local_deploy() {
    print_info "Building locally..."
    
    source $(conda info --base)/etc/profile.d/conda.sh
    conda activate ielts-env
    
    cd docs
    rm -rf _build/html
    sphinx-build -b html . _build/html
    
    if [ $? -eq 0 ]; then
        print_success "Build successful!"
        print_info "Starting server at http://localhost:8000"
        print_info "Press Ctrl+C to stop"
        echo ""
        
        cd _build/html
        python -m http.server 8000
    else
        print_error "Build failed"
        exit 1
    fi
}

remote_deploy() {
    print_info "Deploying remotely..."
    
    if ! git diff-index --quiet HEAD --; then
        print_warning "Uncommitted changes detected"
        read -p "Commit changes? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_info "Committing changes..."
            git add .
            
            commit_msg=$(generate_commit_message)
            print_success "Commit message: $commit_msg"
            
            git commit -m "$commit_msg"
        else
            print_error "Deploy cancelled"
            exit 1
        fi
    fi
    
    print_info "Pushing to GitHub..."
    git push origin main
    
    if [ $? -eq 0 ]; then
        print_success "Deployed successfully!"
        print_info "Website will update in 2-3 minutes"
        print_info "URL: https://edyou25.github.io/awesome-fitness/"
    else
        print_error "Push failed"
        exit 1
    fi
}

main() {
    echo "🚀 Awesome Fitness Deploy"
    echo "========================="
    
    if [ $# -eq 0 ]; then
        show_help
        exit 1
    fi
    
    case $1 in
        -r|--remote)
            check_dependencies
            remote_deploy
            ;;
        -l|--local)
            check_dependencies
            local_deploy
            ;;
        -h|--help)
            show_help
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
}

main "$@"